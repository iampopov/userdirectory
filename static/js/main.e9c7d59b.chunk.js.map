{"version":3,"sources":["styles/index.js","components/NavBar.js","components/EmployeeSearch.js","components/EmployeeCard.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","styled","article","SearchBar","EmployeeCardBar","NavBar","props","EmployeeSearch","Input","type","name","id","placeholder","onChange","handleInputChange","value","searchTerm","EmployeeCard","Row","isSelected","selectedEmployee","Col","Card","className","md","CardImg","top","width","src","image","alt","first","CardBody","CardTitle","last","CardText","email","phone","dob","App","useState","data","sampleData","results","searchResults","employee","setEmployee","e","filter","toLowerCase","includes","target","Container","length","map","record","key","registered","date","picture","large","moment","format","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9c7d59b.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst darkGray = \"#596066\";\nconst lightGray = \"#dbdbdb\";\nconst darkRed = \"#ba0000\";\nconst white = \"#f5f5f5\";\n\nexport const HeaderBar = styled.article`\nborder-bottom: 3px solid ${darkRed};\nbackground-color: ${darkGray};\ncolor: ${white};\ntext-align: center;\n`\n\nexport const SearchBar = styled.article`\nbackground-color: ${lightGray};\npadding: 2rem;\ninput {\n    display: block;\n    margin : auto;\n    width: 250px\n}\n`\nexport const EmployeeBar = styled.article`\nborder-bottom: 2px solid ${lightGray};\nborder-top: 2px solid ${lightGray};\nmargin-top: 5px;\n`\nexport const EmployeeCardBar = styled.article`\n.card-body {\n    padding: 20px 0 0 40px;\n}\n.no-gutters {\n    width: 40rem;\n}\n#ec {\n    margin-top: 1rem;\n}\nli {\n    list-style: none;  \n}\n`\n\n","import React from \"react\";\n\nimport { HeaderBar } from \"../styles\"\n\nconst NavBar = props => {\n    return (\n        <HeaderBar>\n        <h1>Employee Directory</h1>\n        <p>Start typing first or last name in the search box or scroll down to see all employees</p>\n        </HeaderBar>\n    )\n};\n\nexport default NavBar;","import React from \"react\";\nimport { Input } from \"reactstrap\"\n\nimport { SearchBar } from \"../styles\"\n\nconst EmployeeSearch = props => {\n    return (\n\n        <SearchBar>\n            <Input\n             type=\"text\"\n             name=\"searchTerm\"\n             id=\"searchTerm\"\n             placeholder=\"Search employee...\"\n             onChange={props.handleInputChange}\n             value={props.searchTerm}\n             />\n        </SearchBar>\n    )\n};\n\nexport default EmployeeSearch;","import React from \"react\"; //, { Component }\nimport { \n    Row,\n    Col,\n    Card,\n    CardImg,\n    CardBody,\n    CardTitle,\n    CardText\n } from \"reactstrap\";\n\n\nimport { EmployeeCardBar } from \"../styles\"\n//import API from \"../utils/API\";\n\n// const loadEmployee = () => {\n    \n// }\n// class Employee extends Component {\n//     componentDidMount() {\n//         API.getEmployees()\n//             .then(res => console.log(res))\n//             .catch(err => console.log(err))\n//     } \n\n// }\n\nconst EmployeeCard = props => {\n   // console.log(props);\n    \n    return (\n        <Row>\n        <EmployeeCardBar isSelected={props.isSelected} onChange={props.selectedEmployee}>\n                    <Row id=\"ec\">\n                    <Col>\n                    <Card>\n                        <Row className=\"no-gutters\">\n                        <Col md=\"3\">\n                            <CardImg\n                            top\n                            width=\"100%\"\n                            src={props.image}\n                            alt={props.first}\n                            />\n                        </Col>\n                        <Col md=\"8\">\n                            <CardBody>\n                            <CardTitle><h2>{props.first} {props.last}</h2></CardTitle>\n                            <CardText>\n                                <li>Email is: {props.email}</li>\n                                <li>Phone number is {props.phone}</li>\n                                <li>Date of birthday is {props.dob}</li>\n                            </CardText>\n                            \n                            </CardBody>\n                        </Col>\n                        </Row>\n                    </Card>\n                    </Col>\n                </Row>\n               \n                \n        </EmployeeCardBar>\n        </Row>\n    )\n};\n\nexport default EmployeeCard;","import React, {useState} from 'react';\nimport { Container } from \"reactstrap\"; //, Row, Col\n\n\nimport NavBar from \"./components/NavBar\";\nimport EmployeeSearch from \"./components/EmployeeSearch\";\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport sampleData from \"./data/sample.json\";\nimport moment from 'moment';\n\n// I’d create a new value in state called searchResults. Anytime a user searched, I’d take the main list of employees from state and filter it to create the searchResults, then I’d store the updated searchResults in state.\n\n// Then in your JSX you could check to see if searchResults has a length (and thus results), and if it does, show it instead of the main list of employees.\n\n// To make that work, though, you’d need to set searchResults equal to [] when a user was not searching.\n\n// (That way it would default to showing the original employee list instead.\n\nfunction App() {\n  const [employee, setEmployee] = useState({\n    searchTerm: \"\",\n    data: sampleData.results,\n    searchResults: []\n  })\n\n  const { searchTerm, data, searchResults } = employee;\n\n  const handleInputChange = e => {\n    // const { name, value } = e.target;\n    const searchResults = data.filter(employee => employee.email.toLowerCase().includes(e.target.value.toLowerCase()));\n    setEmployee({ ...employee, searchResults, searchTerm: e.target.value});\n  }\n\n  const returnResults = () => {\n    if (searchResults.length) {\n\n      return searchResults.map(record => (\n        <EmployeeCard\n        key={record.registered.date}\n        id={record.registered.date}\n        image = {record.picture.large}\n        first = {record.name.first}\n        last = {record.name.last}\n        //phone = {(record.phone).replace(/\\D/g,'').substring(0,10).match(/^(\\d{3})(\\d{3})(\\d{4})$/)}\n        phone={record.phone}\n        email = {record.email}\n        dob = {moment(record.dob.date, \"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\").format(\"MMMM Do YYYY\")} \n        //dob = {record.dob.date}\n        />\n      ))\n    } else {\n\n      return data.map(record => (\n      <EmployeeCard\n      key={record.registered.date}\n      id={record.registered.date}\n      image = {record.picture.large}\n      first = {record.name.first}\n      last = {record.name.last}\n      //phone = {(record.phone).replace(/\\D/g,'').substring(0,10).match(/^(\\d{3})(\\d{3})(\\d{4})$/)}\n      phone={record.phone}\n      email = {record.email}\n      dob = {moment(record.dob.date, \"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\").format(\"MMMM Do YYYY\")} \n      />\n    ))\n\n    }\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <EmployeeSearch\n        searchTerm={searchTerm}\n        handleInputChange={handleInputChange}\n      />\n      \n      <Container>\n        {returnResults()}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}